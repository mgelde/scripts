#! /bin/env python3

import argparse
import contextlib
import os
import re
import subprocess
import sys
import tempfile
import urllib.parse as urlparse

DEFAULT_MIRRORLIST_FILE = "/etc/pacman.d/mirrorlist.pacnew"

DEFAULT_DOWNLOAD_URL = "https://www.archlinux.org/mirrorlist/?"


def enable_mirrors(path, countries, no_auth):
    if len(countries) == 0:
        country_expression = re.compile(r"^##\s*((\w|\s)*)\s*$", re.IGNORECASE)
    else:
        country_expression = re.compile(
            r"^##\s*((" + "|".join(countries) + r"|\s)*)\s*$", re.IGNORECASE)
    enable_expression = re.compile(r"^#Server\s*=\s*(\w+)://.*", re.IGNORECASE)
    with open(path, "r") as infile:
        enabling = False
        for line in infile:
            if not line.startswith("#Server"):
                enabling = False
            if country_expression.match(line):
                enabling = True
            m_result = enable_expression.match(line)
            if enabling and m_result is not None and (
                    no_auth or m_result.group(1) == "https"):
                print(line[1:], end="")
            else:
                print(line, end="")


def translate_countries(countries):
    translation = {
        "all": "all",
        "australia": "AU",
        "austria": "AT",
        "bangladesh": "BD",
        "belarus": "BY",
        "belgium": "BE",
        "bosnia and herzegovina": "BA",
        "brazil": "BR",
        "bulgaria": "BG",
        "canada": "CA",
        "chile": "CL",
        "china": "CN",
        "colombia": "CO",
        "croatia": "HR",
        "czechia": "CZ",
        "denmark": "DK",
        "ecuador": "EC",
        "finland": "FI",
        "france": "FR",
        "georgia": "GE",
        "germany": "DE",
        "greece": "GR",
        "hong": "HK",
        "hungary": "HU",
        "iceland": "IS",
        "india": "IN",
        "indonesia": "ID",
        "iran": "IR",
        "ireland": "IE",
        "israel": "IL",
        "italy": "IT",
        "japan": "JP",
        "kazakhstan": "KZ",
        "kenya": "KE",
        "latvia": "LV",
        "lithuania": "LT",
        "luxembourg": "LU",
        "netherlands": "NL",
        "new caledonia": "NC",
        "new zealand": "NZ",
        "north macedonia": "MK",
        "norway": "NO",
        "paraguay": "PY",
        "philippines": "PH",
        "poland": "PL",
        "portugal": "PT",
        "romania": "RO",
        "russia": "RU",
        "serbia": "RS",
        "singapore": "SG",
        "slovakia": "SK",
        "slovenia": "SI",
        "south africa": "ZA",
        "south korea": "KR",
        "spain": "ES",
        "sweden": "SE",
        "switzerland": "CH",
        "taiwan": "TW",
        "thailand": "TH",
        "turkey": "TR",
        "ukraine": "UA",
        "united kingdom": "GB",
        "united states": "US",
        "vietnam": "VN",
    }
    result = []
    for name in countries:
        try:
            result.append(translation[name.lower()])
        except KeyError:
            print("[!] Could not identify country ", name, file=sys.stderr)
    return result


@contextlib.contextmanager
def maketempfile(prefix=""):
    fdescriptor, name = tempfile.mkstemp(prefix=prefix)
    yield name
    os.close(fdescriptor)


def main():
    parser = argparse.ArgumentParser(
        prog="enable-mirrors", description="Enable pacman mirrors by country")
    parser.add_argument(
        "countries",
        type=str,
        nargs="*",
        help=
        "List of countries to enable (case insensitive). No arguments means: 'enable all'."
    )
    parser.add_argument(
        "--filename",
        "-f",
        dest="filename",
        default=None,
        type=str,
        help="Path to mirrorlist file. If not specified, {:s} is used.".format(
            DEFAULT_MIRRORLIST_FILE))
    parser.add_argument("--no-auth",
                        "-N",
                        dest="no_auth",
                        default=False,
                        action="store_true",
                        help="Also use non-https URLs")
    parser.add_argument("--no-download",
                        dest="no_download",
                        default=False,
                        action="store_true",
                        help="Do not download a mirror list.")
    args = parser.parse_args()
    if args.filename and not args.no_download:
        print("[!] Cannot use --filename without --no-download.",
              file=sys.stderr)
        sys.exit(1)

    if args.no_download:
        if args.filename is None:
            args.filename = DEFAULT_MIRRORLIST_FILE
        enable_mirrors(args.filename, args.countries, args.no_auth)
    else:
        query_list = []
        translated_countries = translate_countries(args.countries)
        query_list.extend(
            zip(["country"] * len(translated_countries), translated_countries))
        if not query_list:  # no countries
            query_list.append(("country", "all"))
        query_list.append(("protocol", "https"))
        if args.no_auth:
            query_list.append(("protocol", "http"))
        query_list.extend([("ip_version", 4), ("ip_version", 6),
                           ("mirror_status", "on")])

        url = DEFAULT_DOWNLOAD_URL + urlparse.urlencode(query_list)
        with maketempfile(prefix="mirrorlist") as tempmirrorlist:
            try:
                subprocess.run(["curl", "-o", tempmirrorlist, url],
                               stdout=subprocess.PIPE,
                               stderr=subprocess.PIPE,
                               check=True)
            except subprocess.CalledProcessError as err:
                print("[!] Error downloading mirror list. Curl returned ",
                      err.returncode,
                      file=sys.stderr)
                print(err.stderr.decode(), file=sys.stderr)
            enable_mirrors(tempmirrorlist, [], args.no_auth)


if __name__ == "__main__":
    main()
